#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

#ifndef LIMIT
#define LIMIT 10000
#endif

// for the tests, vary LIMIT from 1, 10, 100, 1000, 10000, 100000 (unless you think there's a better way)

int main() {
    // generates a massive addition in a file called add.L. we need to test compilation time for this as well
    // as speedup b/w compiler and interpreter
    char* a = new char[6];
    sprintf(a, "%d", LIMIT);
    string limit {a};

    string plus_str{"plus_"};
    plus_str.append(limit);
    plus_str.append(".L");
    ofstream plus(plus_str);
    plus << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        plus << " + 1";
    }
    plus.close();

    string minus_str{"minus_"};
    minus_str.append(limit);
    minus_str.append(".L");
    ofstream minus(minus_str);
    minus << LIMIT << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        minus << " - 1";
    }
    minus.close();

    string mult_str{"mult_"};
    mult_str.append(limit);
    mult_str.append(".L");
    ofstream mult(mult_str);
    mult << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        mult << " * 1";
    }
    mult.close();

    string div_str{"div_"};
    div_str.append(limit);
    div_str.append(".L");
    ofstream div(div_str);
    div << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        div << " / 1";
    }
    div.close();

    string head_list_str{"head_list_"};
    head_list_str.append(limit);
    head_list_str.append(".L");
    ofstream head_list(head_list_str);
    head_list << "let list = 1@2 in" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        head_list << "let _ = !list in" << endl;
    }
    head_list << "0" << endl;
    head_list.close();

    string head_not_list_str{"head_not_list_"};
    head_not_list_str.append(limit);
    head_not_list_str.append(".L");
    ofstream head_not_list(head_not_list_str);
    head_not_list << "let not_list = 1@2 in" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        head_not_list << "let _ = !not_list in" << endl;
    }
    head_not_list << "0" << endl;
    head_not_list.close();

    string tail_list_str{"tail_list_"};
    tail_list_str.append(limit);
    tail_list_str.append(".L");
    ofstream tail_list(tail_list_str);
    tail_list << "let list = 1@2 in" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        tail_list << "let _ = #list in" << endl;
    }
    tail_list << "0" << endl;
    tail_list.close();

    string tail_not_list_str{"tail_not_list_"};
    tail_not_list_str.append(limit);
    tail_not_list_str.append(".L");
    ofstream tail_not_list(tail_not_list_str);
    tail_not_list << "let not_list = 1@2 in" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        tail_not_list << "let _ = #not_list in" << endl;
    }
    tail_not_list << "0" << endl;
    tail_not_list.close();

    string isnil_list_str{"isnil_list_"};
    isnil_list_str.append(limit);
    isnil_list_str.append(".L");
    ofstream isnil_list(isnil_list_str);
    isnil_list << "let list = 1@2 in" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        isnil_list << "let _ = isNil list in" << endl;
    }
    isnil_list << "0" << endl;
    isnil_list.close();

    string isnil_not_list_str{"isnil_not_list_"};
    isnil_not_list_str.append(limit);
    isnil_not_list_str.append(".L");
    ofstream isnil_not_list(isnil_not_list_str);
    isnil_not_list << "let not_list = 1@2 in" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        isnil_not_list << "let _ = isNil not_list in" << endl;
    }
    isnil_not_list << "0" << endl;
    isnil_not_list.close();

    string cons_str{"cons_"};
    cons_str.append(limit);
    cons_str.append(".L");
    ofstream cons(cons_str);
    cons << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        cons << "@1";
    }
    cons.close();

    string fun_str{"fun_"};
    fun_str.append(limit);
    fun_str.append(".L");
    ofstream fun(fun_str);
    fun << "fun f0 with x = x in" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        fun << "fun f" << i << " with x = x in " << endl;
    }
    fun << "(f0 1)" << endl;
    fun.close();

    string apply_str{"apply_"};
    apply_str.append(limit);
    apply_str.append(".L");
    ofstream apply(apply_str);
    apply << "fun id with x = x in" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        apply << "let _ = (id " << i << ") in " << endl;
    }
    apply << "0" << endl;
    apply.close();

    string read_string_str{"read_string_"};
    read_string_str.append(limit);
    read_string_str.append(".L");
    ofstream read_string(read_string_str);
    read_string << "let _ = readString in" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        read_string << "let _ = readString in" << endl;
    }
    read_string << "0" << endl;
    read_string.close();

    string read_int_str{"read_int_"};
    read_int_str.append(limit);
    read_int_str.append(".L");
    ofstream read_int(read_int_str);
    read_int << "let _ = readInt in" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        read_int << "let _ = readInt in" << endl;
    }
    read_int << "0" << endl;
    read_int.close();

    string gt_str{"gt_"};
    gt_str.append(limit);
    gt_str.append(".L");
    ofstream gt(gt_str);
    gt << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        gt << "> 2" << endl;
    }
    gt.close();

    string geq_str{"geq_"};
    geq_str.append(limit);
    geq_str.append(".L");
    ofstream geq(geq_str);
    geq << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        geq << ">= 2" << endl;
    }
    geq.close();

    string lt_str{"lt_"};
    lt_str.append(limit);
    lt_str.append(".L");
    ofstream lt(lt_str);
    lt << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        lt << "< 2" << endl;
    }
    lt.close();

    string leq_str{"leq_"};
    leq_str.append(limit);
    leq_str.append(".L");
    ofstream leq(leq_str);
    leq << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        leq << "<= 2" << endl;
    }
    leq.close();

    string eq_str{"eq_"};
    eq_str.append(limit);
    eq_str.append(".L");
    ofstream eq(eq_str);
    eq << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        eq << "= 2" << endl;
    }
    eq.close();

    string neq_str{"neq_"};
    neq_str.append(limit);
    neq_str.append(".L");
    ofstream neq(neq_str);
    neq << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        neq << "<> 2" << endl;
    }
    neq.close();

    string and_op_str{"and_op_"};
    and_op_str.append(limit);
    and_op_str.append(".L");
    ofstream and_op(and_op_str);
    and_op << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        and_op << "& 2" << endl;
    }
    and_op.close();

    string or_op_str{"or_op_"};
    or_op_str.append(limit);
    or_op_str.append(".L");
    ofstream or_op(or_op_str);
    or_op << "1" << endl;
    for(int i = 1; i <= LIMIT; i++ ) {
        or_op << "| 2" << endl;
    }
    or_op.close();
    return 0;
}
